# -*- coding: utf-8 -*-
"""Topic_module_(2) (2).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ANNJ9PweLSOD5URAfaOkGx7buph5nLlp
"""

import pandas as pd
import numpy as np
import csv

X = pd.read_csv('/content/Modularity.csv',sep=',')

X

Y = pd.read_excel("/content/119.xlsx")

Y

import numpy as np
vector_dimension = 1044

vectors_per_agent = []
topics = []

for modularity in X["modularity_class"]:
  if modularity == 20 or modularity == 22 or modularity == 5:
    if modularity == 20:
      vectors_per_agent.append(Y["Существ"])
    if modularity == 22:
      vectors_per_agent.append(Y["Прил"])
    if modularity == 5:
      vectors_per_agent.append(Y["Глагол"])
  else:
    vectors_per_agent.append(Y["Глагол"])




topics.append(Y["В мире"])
topics.append(Y["Экономика"])
topics.append(Y["Общество"])
topics.append(Y["Армия"])
topics.append(Y["Наука"])
topics.append(Y["Спорт"])
topics.append(Y["Культура"])
topics.append(Y["Религия"])
topics.append(Y["Туризм"])

m1 = 0
m2 = 0
m3 = 0
m4 = 0




for modularity in X["modularity_class"]:
  if modularity == 1:
    m2 = m2 + 1
  if modularity == 3:
    m4 = m4 + 1
  if modularity == 0:
    m1 = m1 + 1
  if modularity == 2:
    m3 = m3 + 1

print (m1,m2,m3,m4)

with open('vectors.csv', 'w', newline='') as csvfile:
  writer = csv.writer(csvfile)
  writer.writerows(vectors_per_agent)


with open('vectors_of_topics.csv', 'w', newline='') as csvfile:
  writer = csv.writer(csvfile)
  writer.writerows(topics)



vectors_topics = pd.read_csv('/content/vectors_of_topics.csv',header = None)

vectors_topics

# Загрузите таблицы из CSV файлов
table1 = pd.read_csv('/content/Modularity.csv')
table2 = pd.read_csv('/content/vectors.csv', header = None)

# Создайте новую таблицу, объединив столбец "Id" из table1 с остальными столбцами из table2
new_table = pd.concat([table1, table2], axis=1)

# Сохраните новую таблицу в CSV файл
new_table.to_csv('new_table.csv', index=False)
Data = pd.read_csv("new_table.csv")

Data

grouped_data = Data.groupby('modularity_class').mean()

grouped_data.pop('Id')

grouped_data.to_csv('groups.csv')

import pandas as pd
import numpy as np
from scipy.spatial.distance import cosine

# Загрузите данные из CSV файлов в pandas DataFrame
topics_df = pd.read_csv('/content/vectors_of_topics.csv', header=None)
topics_df.reset_index(drop=True, inplace=True)
topics_df.insert(0, 'Topic', [1, 2, 3, 4, 5, 6, 7, 8, 9])

groups_df = pd.read_csv('/content/groups.csv')
groups_df.reset_index(drop=True, inplace=True)

# Отдельно сохраняем столбец с номерами тем и групп, чтобы он не участвовал в расчетах
topics_numbers = topics_df['Topic']
groups_numbers = groups_df['modularity_class']

# Удаляем столбец с номерами из DataFrame
topics_df.drop(columns=['Topic'], inplace=True)
groups_df.drop(columns=['modularity_class'], inplace=True)

# Преобразуем DataFrame в массив NumPy для вычислений

topics_vectors = topics_df.to_numpy()
groups_vectors = groups_df.to_numpy()

# Создайте пустой список для хранения индексов наиболее близких тем к каждой группе
most_similar_topics_indices = []

# Найдите наиболее близкую тему для каждой группы
for group_vector in groups_vectors:
    similarities = [1 - cosine(group_vector, topic_vector) for topic_vector in topics_vectors]
    most_similar_topic_index = np.argmax(similarities)
    most_similar_topics_indices.append(most_similar_topic_index)



most_similar_topics_indices

result_df = pd.DataFrame({'GroupNumber': groups_numbers, 'MostSimilarTopic': most_similar_topics_indices})

result_df

result_df.to_csv('result.csv', index=False)

import pandas as pd

# Загрузим таблицу "results"
results_df = pd.read_csv('result.csv')

# Создадим словарь, где ключами будут номера групп, а значениями - соответствующие любимые темы
group_topic_mapping = dict(zip(results_df['GroupNumber'], results_df['MostSimilarTopic']))

# Загрузим таблицу "Modularity"
modularity_df = pd.read_csv('Modularity.csv')

# Создадим общую таблицу для агентов с информацией об их группе и любимой теме
agent_info = {'AgentId': modularity_df['Id'],
              'GroupNumber': modularity_df['modularity_class'],
              'FavoriteTopic': modularity_df['modularity_class'].map(group_topic_mapping)}

# Создадим DataFrame на основе словаря
agent_info_df = pd.DataFrame(agent_info)

# Выведем первые строки общей таблицы для проверки
print(agent_info_df.head())

agent_info_df.to_csv('agent_info.csv', sep = ";", index=False)

agent_info_df

import pandas as pd
import numpy as np

# Load agent_info_df from 'agent_info.csv' with columns AgentId, GroupNumber, FavoriteTopic
agent_info_df = pd.read_csv('agent_info.csv', sep = ";")

topic_probs = {
    'Group_Same': [0.55] + [0.45 / 9] * 9,
    'Group_Different_Same_FavTopic': [0.46] + [0.54 / 9] * 9,
    'Group_Different_Different_FavTopic': [0.25, 0.25] + [0.5 / 8] * 8
}

def select_scenario(group_number_1, group_number_2, fav_topic_1, fav_topic_2):
    if group_number_1 == group_number_2:
        if fav_topic_1 == fav_topic_2:
            return 'Group_Same'
        else:
            return 'Group_Different_Same_FavTopic'
    else:
        if fav_topic_1 == fav_topic_2:
            return 'Group_Different_Same_FavTopic'
        else:
            return 'Group_Different_Different_FavTopic'

def select_topic(scenario, fav_topic):
    topic_probs_for_scenario = topic_probs[scenario]
    topics = list(range(10))
    chosen_topic = np.random.choice(topics, p=topic_probs_for_scenario)

    if chosen_topic == 0:
        return fav_topic
    else:
        return chosen_topic

# Create a DataFrame to store the results
result_df = pd.DataFrame(columns=['AgentId1', 'AgentId2', 'SelectedTopic'])

# Compare each agent with every other agent
for i in range(len(agent_info_df)):
    for j in range(i + 1, len(agent_info_df)):
        agent1 = agent_info_df.iloc[i]
        agent2 = agent_info_df.iloc[j]

        scenario = select_scenario(agent1['GroupNumber'], agent2['GroupNumber'], agent1['FavoriteTopic'], agent2['FavoriteTopic'])
        selected_topic = select_topic(scenario, agent1['FavoriteTopic'])

        result_df = result_df.append({'AgentId1': agent1['AgentId'], 'AgentId2': agent2['AgentId'], 'SelectedTopic': selected_topic}, ignore_index=True)

# Save the result to a CSV file
result_df.to_csv('communication_results.csv', index=False)

import pandas as pd

# Создаем пустой список для хранения данных агентов
agent_data = []

# Получаем информацию об агентах и добавляем ее в список agent_data
for agent in people:
    agent_id = agent.agent_id
    group_number = agent.group_number
    opinion = agent.opinion.x
    agent_data.append([agent_id, group_number, opinion])

# Создаем DataFrame из списка agent_data
columns = ['AgentId', 'GroupNumber', 'Opinion']
df_results = pd.DataFrame(agent_data, columns=columns)

# Сохраняем DataFrame в файл CSV
df_results.to_csv('agent_results.csv', index=False)

# Сохраняем DataFrame в файл Excel
df_results.to_excel('agent_results.xlsx', index=False)

num_agents = 100
connections_matrix = np.zeros((num_agents, num_agents))

# Заполняем матрицу связей на основе информации о связях между агентами
for person in people:
    agent_id = person.agent_id
    for connection in person.connections:
        connected_agent_id = connection.person.agent_id
        strength = connection.strength
        connections_matrix[agent_id - 1][connected_agent_id - 1] = strength

# Создаем DataFrame из матрицы связей
connections_df = pd.DataFrame(connections_matrix)
connections_df.insert(0, 'Source', range(100))

connections_df.to_csv('agent_connections_matrix.csv', sep = ";", index=False)

connections_df

connections_df.insert(0, 'Source', range(100))

connections_df